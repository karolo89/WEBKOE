{
  "hash": "209ff1523d11742c29d514396f594eea",
  "result": {
    "markdown": "---\ntitle: \"Customer Churn Prediction\"\nauthor: \"Orozco Karol M.\"\ncategories: [Data Journalism, R]\nimage: theranos.jpg\n---\n\n\nThis report presents an analysis of bank customer churn. The dataset contains various attributes of bank customers, and the goal is to predict whether a customer is likely to churn or not.\n\n**Task:** Create a model that predicts churns of bank customers using only 5 features. \n\n\n\n\n\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbank <-readRDS(gzcon(url(\"https://github.com/karolo89/Raw_Data/raw/main/BankChurners.rds\")))  \nbank = bank %>% rename_all(funs(tolower(.))) \n\n\nskim(bank)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |      |\n|:------------------------|:-----|\n|Name                     |bank  |\n|Number of rows           |10127 |\n|Number of columns        |20    |\n|_______________________  |      |\n|Column type frequency:   |      |\n|character                |6     |\n|numeric                  |14    |\n|________________________ |      |\n|Group variables          |None  |\n\n\n**Variable type: character**\n\n|skim_variable   | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:---------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|gender          |         0|             1|   1|   1|     0|        2|          0|\n|education_level |         0|             1|   7|  13|     0|        7|          0|\n|marital_status  |         0|             1|   6|   8|     0|        4|          0|\n|income_category |         0|             1|   7|  14|     0|        6|          0|\n|card_category   |         0|             1|   4|   8|     0|        4|          0|\n|churn           |         0|             1|   2|   3|     0|        2|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable            | n_missing| complete_rate|    mean|      sd|     p0|     p25|     p50|      p75|     p100|hist  |\n|:------------------------|---------:|-------------:|-------:|-------:|------:|-------:|-------:|--------:|--------:|:-----|\n|customer_age             |         0|             1|   46.33|    8.02|   26.0|   41.00|   46.00|    52.00|    73.00|▂▆▇▃▁ |\n|dependent_count          |         0|             1|    2.35|    1.30|    0.0|    1.00|    2.00|     3.00|     5.00|▇▇▇▅▁ |\n|months_on_book           |         0|             1|   35.93|    7.99|   13.0|   31.00|   36.00|    40.00|    56.00|▁▃▇▃▂ |\n|total_relationship_count |         0|             1|    3.81|    1.55|    1.0|    3.00|    4.00|     5.00|     6.00|▇▇▆▆▆ |\n|months_inactive_12_mon   |         0|             1|    2.34|    1.01|    0.0|    2.00|    2.00|     3.00|     6.00|▅▇▇▁▁ |\n|contacts_count_12_mon    |         0|             1|    2.46|    1.11|    0.0|    2.00|    2.00|     3.00|     6.00|▅▇▇▃▁ |\n|credit_limit             |         0|             1| 8631.95| 9088.78| 1438.3| 2555.00| 4549.00| 11067.50| 34516.00|▇▂▁▁▁ |\n|total_revolving_bal      |         0|             1| 1162.81|  814.99|    0.0|  359.00| 1276.00|  1784.00|  2517.00|▇▅▇▇▅ |\n|avg_open_to_buy          |         0|             1| 7469.14| 9090.69|    3.0| 1324.50| 3474.00|  9859.00| 34516.00|▇▂▁▁▁ |\n|total_amt_chng_q4_q1     |         0|             1|    0.76|    0.22|    0.0|    0.63|    0.74|     0.86|     3.40|▅▇▁▁▁ |\n|total_trans_amt          |         0|             1| 4404.09| 3397.13|  510.0| 2155.50| 3899.00|  4741.00| 18484.00|▇▅▁▁▁ |\n|total_trans_ct           |         0|             1|   64.86|   23.47|   10.0|   45.00|   67.00|    81.00|   139.00|▂▅▇▂▁ |\n|total_ct_chng_q4_q1      |         0|             1|    0.71|    0.24|    0.0|    0.58|    0.70|     0.82|     3.71|▇▆▁▁▁ |\n|avg_utilization_ratio    |         0|             1|    0.27|    0.28|    0.0|    0.02|    0.18|     0.50|     1.00|▇▂▂▂▁ |\n:::\n\n```{.r .cell-code}\nbank = bank %>% mutate(churn = as.factor(churn))\n\nvariables = bank %>% select(-churn) %>% colnames() \n```\n:::\n\n## PCA on bank data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbank = bank %>% mutate(churn = as.factor(churn))\nbank2 = bank %>% select(-churn) %>% dummy_cols(remove_selected_columns = T)\n\nbank3 = cbind(bank2, select(bank,churn))\n\npr_bank = prcomp(x = select(bank3,-churn), scale = T, center = T)\nsummary(pr_bank)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImportance of components:\n                          PC1     PC2     PC3     PC4     PC5     PC6     PC7\nStandard deviation     2.0935 1.59707 1.39557 1.33895 1.32059 1.23115 1.17914\nProportion of Variance 0.1184 0.06894 0.05264 0.04845 0.04713 0.04097 0.03758\nCumulative Proportion  0.1184 0.18739 0.24003 0.28848 0.33562 0.37658 0.41416\n                           PC8     PC9    PC10    PC11    PC12    PC13    PC14\nStandard deviation     1.16072 1.14016 1.12050 1.10705 1.09341 1.08695 1.07232\nProportion of Variance 0.03641 0.03513 0.03393 0.03312 0.03231 0.03193 0.03108\nCumulative Proportion  0.45057 0.48571 0.51964 0.55276 0.58507 0.61700 0.64808\n                          PC15    PC16    PC17    PC18    PC19    PC20    PC21\nStandard deviation     1.06071 1.04983 1.03504 1.03468 1.01815 1.00334 1.00200\nProportion of Variance 0.03041 0.02979 0.02895 0.02893 0.02802 0.02721 0.02714\nCumulative Proportion  0.67849 0.70828 0.73723 0.76617 0.79418 0.82139 0.84853\n                          PC22    PC23    PC24    PC25    PC26    PC27    PC28\nStandard deviation     0.98911 0.98698 0.94978 0.89307 0.77324 0.73409 0.48917\nProportion of Variance 0.02644 0.02633 0.02438 0.02156 0.01616 0.01456 0.00647\nCumulative Proportion  0.87497 0.90130 0.92568 0.94723 0.96339 0.97796 0.98442\n                          PC29    PC30    PC31      PC32      PC33      PC34\nStandard deviation     0.45819 0.45069 0.40402 3.319e-15 2.797e-15 1.658e-15\nProportion of Variance 0.00567 0.00549 0.00441 0.000e+00 0.000e+00 0.000e+00\nCumulative Proportion  0.99010 0.99559 1.00000 1.000e+00 1.000e+00 1.000e+00\n                            PC35      PC36      PC37\nStandard deviation     8.306e-16 7.947e-16 5.318e-16\nProportion of Variance 0.000e+00 0.000e+00 0.000e+00\nCumulative Proportion  1.000e+00 1.000e+00 1.000e+00\n```\n:::\n\n```{.r .cell-code}\nscreeplot(pr_bank, type = \"lines\")\n```\n\n::: {.cell-output-display}\n![](churners_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\nhead(pr_bank$rotation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                  PC1         PC2        PC3         PC4\ncustomer_age             -0.010813997  0.07575479 -0.4330194  0.44349923\ndependent_count           0.036907819 -0.03773176  0.1127192 -0.08119344\nmonths_on_book           -0.005699747  0.07134628 -0.4278530  0.43907287\ntotal_relationship_count -0.049689093  0.20014156 -0.1023431 -0.14783665\nmonths_inactive_12_mon   -0.012256624  0.02657769 -0.1145865 -0.00192171\ncontacts_count_12_mon     0.016040264  0.09090432 -0.1233009 -0.16313733\n                                 PC5          PC6         PC7         PC8\ncustomer_age             -0.26684222  0.003345576 -0.03336354  0.03636211\ndependent_count           0.10910052  0.097514325  0.04081514 -0.04468165\nmonths_on_book           -0.27473438  0.006509941 -0.02940410  0.04106787\ntotal_relationship_count  0.11507528 -0.293862484 -0.10860198  0.11936190\nmonths_inactive_12_mon   -0.05928810  0.039294366  0.04268363 -0.01071041\ncontacts_count_12_mon     0.03555331 -0.047800261  0.05699464 -0.06272773\n                                  PC9        PC10         PC11        PC12\ncustomer_age              0.034871555 -0.02388748 -0.037534809 -0.03807232\ndependent_count          -0.076070481  0.12190979 -0.008339845  0.02454218\nmonths_on_book            0.044670014 -0.02899957 -0.039330876 -0.04986042\ntotal_relationship_count -0.002946349 -0.01856168 -0.023561561 -0.04594087\nmonths_inactive_12_mon   -0.042706255 -0.01254024 -0.001370611 -0.10113015\ncontacts_count_12_mon     0.018184995  0.00377209  0.002264876  0.01355260\n                                PC13        PC14         PC15         PC16\ncustomer_age             -0.06116398  0.06317606  0.006494843  0.009436493\ndependent_count          -0.02638936  0.11642017  0.001673607  0.055360500\nmonths_on_book           -0.07896600  0.06289540  0.002830306  0.003837683\ntotal_relationship_count -0.02254961  0.04741229  0.048781401 -0.041637320\nmonths_inactive_12_mon   -0.01108998 -0.02635780 -0.049552509  0.051869876\ncontacts_count_12_mon     0.07469369 -0.10088119  0.072474077 -0.005302043\n                                  PC17        PC18        PC19         PC20\ncustomer_age              0.0046260131  0.01474486  0.01783912 -0.007356427\ndependent_count           0.1146010390  0.15478813 -0.05897042  0.074815354\nmonths_on_book            0.0001919797  0.01262245  0.02195394  0.015122347\ntotal_relationship_count -0.0408216142  0.01686286  0.01348213 -0.018687486\nmonths_inactive_12_mon    0.0824836888 -0.01448339  0.11059555  0.277638094\ncontacts_count_12_mon     0.0407699668 -0.02726225  0.06562620  0.146390167\n                                PC21        PC22        PC23       PC24\ncustomer_age             -0.06558833 -0.06351209 -0.01064648  0.1024421\ndependent_count          -0.50796833  0.02001298 -0.50564694  0.5719210\nmonths_on_book           -0.06845297 -0.04275912 -0.02657220  0.1239862\ntotal_relationship_count -0.10580938 -0.03651157  0.03068239 -0.1217489\nmonths_inactive_12_mon    0.21584825  0.78096916 -0.40165046 -0.2026135\ncontacts_count_12_mon     0.52037905  0.09210553  0.27449467  0.7165355\n                                PC25        PC26         PC27         PC28\ncustomer_age             -0.02043515  0.02336751 -0.018369091  0.144540965\ndependent_count          -0.06697885  0.10364753 -0.073862975 -0.064763592\nmonths_on_book           -0.03663324  0.05514194 -0.015721295 -0.165681805\ntotal_relationship_count -0.85955423  0.09837121  0.012247228 -0.029775424\nmonths_inactive_12_mon   -0.06269537 -0.01000118  0.032628165  0.003588938\ncontacts_count_12_mon    -0.11331729 -0.08398211 -0.008385573  0.024734695\n                                 PC29         PC30        PC31          PC32\ncustomer_age             -0.635515600  0.261539522 -0.09877505 -1.887639e-15\ndependent_count          -0.026086053  0.032269460  0.01517943  1.925078e-16\nmonths_on_book            0.636461211 -0.234306089  0.09139278  2.426439e-17\ntotal_relationship_count -0.039147775 -0.025969167  0.08419164  1.291153e-16\nmonths_inactive_12_mon   -0.019657762 -0.005034916 -0.01066676 -5.772458e-18\ncontacts_count_12_mon     0.001569711  0.003087043 -0.02410749 -5.374320e-17\n                                  PC33          PC34          PC35\ncustomer_age              0.000000e+00  0.000000e+00  0.000000e+00\ndependent_count          -7.416891e-16  3.532298e-16 -1.361726e-17\nmonths_on_book           -8.967587e-19  3.684053e-17 -6.963161e-17\ntotal_relationship_count -1.599655e-16 -8.128213e-17  1.130684e-16\nmonths_inactive_12_mon   -3.464590e-16  8.140217e-17 -1.148155e-16\ncontacts_count_12_mon    -6.811342e-17 -7.923795e-18  4.187115e-17\n                                  PC36          PC37\ncustomer_age              0.000000e+00  0.000000e+00\ndependent_count          -2.819017e-17  6.676781e-17\nmonths_on_book            1.695052e-16 -3.853568e-17\ntotal_relationship_count -1.974333e-16 -1.370081e-16\nmonths_inactive_12_mon    8.703000e-17 -5.534544e-18\ncontacts_count_12_mon    -1.440254e-17 -1.028874e-16\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames_to_column(as.data.frame(pr_bank$rotation)) %>% \n  select(1:5) %>% \n    filter(abs(PC1) >= 0.3 | abs(PC2) >= 0.3 | abs(PC3) >= 0.3 | abs(PC4) >= 0.3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  rowname          PC1         PC2         PC3          PC4\n1            customer_age -0.010813997  0.07575479 -0.43301936  0.443499234\n2          months_on_book -0.005699747  0.07134628 -0.42785303  0.439072869\n3            credit_limit  0.413014059 -0.11846478 -0.11563523 -0.003755843\n4     total_revolving_bal -0.034971577 -0.00101243  0.21650964  0.334555958\n5         avg_open_to_buy  0.416062573 -0.11834914 -0.13502121 -0.033748268\n6         total_trans_amt  0.100869534 -0.36992793  0.28988380  0.262444253\n7          total_trans_ct  0.044317988 -0.38057169  0.30325940  0.225273171\n8                gender_F -0.355263483 -0.32165703 -0.19033683 -0.067697739\n9                gender_M  0.355263483  0.32165703  0.19033683  0.067697739\n10 marital_status_Married -0.030806901  0.17389456 -0.04988192  0.320106969\n11     card_category_Blue -0.257857151  0.35138834  0.15913494 -0.022247279\n12   card_category_Silver  0.223199987 -0.30357645 -0.15383454  0.005039861\n```\n:::\n\n```{.r .cell-code}\nprc = bind_cols(select(bank3, churn), as.data.frame(pr_bank$x)) %>%\n  select(1:5) %>%\n    rename(\"rich_men\" = PC1, \"cheap_men\" = PC2, \"young_spenders\" = PC3, \"old_spenders\"= PC4)\n\n#based on the graph below, \"young spenders\" and \"old spenders\" seem to be the most predictive of whether the customer will churn. \n\nprc %>%\npivot_longer(cols = -churn, names_to = \"component\", values_to = \"loading\") %>% mutate(churn = as.factor(churn)) %>%\nggplot(aes(loading, fill=churn)) +\ngeom_density(alpha = 0.5) +\nfacet_grid(.~component)\n```\n\n::: {.cell-output-display}\n![](churners_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n## Random Forest model with all variables on entire ds, then  plotting importance of variables to see most impactful: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nctrl <- trainControl(method = \"cv\", number = 3, classProbs=TRUE, summaryFunction = twoClassSummary)\n\nbank_index <- createDataPartition(bank$churn, p = 0.80, list = FALSE)\ntrain <- bank[ bank_index, ]\ntest <- bank[-bank_index, ]\n\nbig_model =train(churn ~ .,\n             data = train, \n             method = \"rf\",\n             tunelength = 4,\n             metric = \"ROC\",\n             trControl = ctrl)\n\nimportance = varImp(big_model)\n\nplot(importance)\n```\n\n::: {.cell-output-display}\n![](churners_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#most important variables are total_trans_ct, total_trans_amt, total_revolving_bal, total_ct_chng_q4_41, total_relationship_count \n```\n:::\n\n\n## Combining PRC variables with top columns \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#choosing \"old_spenders\" and \"young_spenders\" to be 2 of the 5 total features in the model: \nprc2 = prc%>% select(young_spenders,old_spenders) \n\n#combining these features with rest of bank ds, then grabbing best variables: \nbanksy = cbind(prc2, bank3) %>% \n            select(young_spenders, old_spenders,total_trans_ct,total_trans_amt,total_revolving_bal, churn)\n```\n:::\n\n\n## KNN Model \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# specify the model to be used (i.e. KNN, Naive Bayes, decision tree, random forest, bagged trees) and the tuning parameters used\n\n\n\nset.seed(504) \n\nbank_index <- createDataPartition(banksy$churn, p = 0.80, list = FALSE)\ntrain <- banksy[ bank_index, ]\ntest <- banksy[-bank_index, ]\n\n# example spec for rf\nfit <- train(churn ~ .,\n             data = train, \n             method = \"knn\",\n             preProcess = c(\"center\",\"scale\"),\n             tuneGrid = expand.grid(k = seq(31,41,2)), # best K between 31 and 41 \n             metric = \"ROC\",\n             trControl = ctrl)\n\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nk-Nearest Neighbors \n\n8102 samples\n   5 predictor\n   2 classes: 'no', 'yes' \n\nPre-processing: centered (5), scaled (5) \nResampling: Cross-Validated (3 fold) \nSummary of sample sizes: 5401, 5402, 5401 \nResampling results across tuning parameters:\n\n  k   ROC        Sens       Spec     \n  31  0.9388497  0.9677940  0.5814132\n  33  0.9389534  0.9673527  0.5806452\n  35  0.9388799  0.9677940  0.5760369\n  37  0.9390690  0.9676468  0.5691244\n  39  0.9382645  0.9676467  0.5714286\n  41  0.9378081  0.9672054  0.5675883\n\nROC was used to select the optimal model using the largest value.\nThe final value used for the model was k = 37.\n```\n:::\n\n```{.r .cell-code}\nconfusionMatrix(predict(fit, test),factor(test$churn))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   no  yes\n       no  1640  117\n       yes   60  208\n                                          \n               Accuracy : 0.9126          \n                 95% CI : (0.8994, 0.9245)\n    No Information Rate : 0.8395          \n    P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n                  Kappa : 0.6509          \n                                          \n Mcnemar's Test P-Value : 2.563e-05       \n                                          \n            Sensitivity : 0.9647          \n            Specificity : 0.6400          \n         Pos Pred Value : 0.9334          \n         Neg Pred Value : 0.7761          \n             Prevalence : 0.8395          \n         Detection Rate : 0.8099          \n   Detection Prevalence : 0.8677          \n      Balanced Accuracy : 0.8024          \n                                          \n       'Positive' Class : no              \n                                          \n```\n:::\n\n```{.r .cell-code}\nmyRoc <- roc(test$churn, predict(fit, test, type=\"prob\")[,2])\n\nplot(myRoc)\n```\n\n::: {.cell-output-display}\n![](churners_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nauc(myRoc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nArea under the curve: 0.9518\n```\n:::\n\n```{.r .cell-code}\n#.95 AUC \n```\n:::\n\n\n## Downsampling bank data to remove imbalance of yes/no churn: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraindown = downSample(x = train[,-6], y= train$churn) %>% mutate(churn = Class) %>% select(-Class)\ntraindown %>% group_by(churn) %>% count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n# Groups:   churn [2]\n  churn     n\n  <fct> <int>\n1 no     1302\n2 yes    1302\n```\n:::\n:::\n\n\n## Random Forest Model with downsampling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- train(churn ~ .,\n             data = traindown, \n             method = \"rf\",\n             tuneLength = 4, \n             metric = \"ROC\",\n             trControl = ctrl)\n\nconfusionMatrix(predict(fit, test),factor(test$churn))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   no  yes\n       no  1534   26\n       yes  166  299\n                                          \n               Accuracy : 0.9052          \n                 95% CI : (0.8916, 0.9176)\n    No Information Rate : 0.8395          \n    P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n                  Kappa : 0.7003          \n                                          \n Mcnemar's Test P-Value : < 2.2e-16       \n                                          \n            Sensitivity : 0.9024          \n            Specificity : 0.9200          \n         Pos Pred Value : 0.9833          \n         Neg Pred Value : 0.6430          \n             Prevalence : 0.8395          \n         Detection Rate : 0.7575          \n   Detection Prevalence : 0.7704          \n      Balanced Accuracy : 0.9112          \n                                          \n       'Positive' Class : no              \n                                          \n```\n:::\n\n```{.r .cell-code}\nmyRoc <- roc(test$churn, predict(fit, test, type=\"prob\")[,2])\n\nplot(myRoc)\n```\n\n::: {.cell-output-display}\n![](churners_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nauc(myRoc) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nArea under the curve: 0.9708\n```\n:::\n\n```{.r .cell-code}\n# AUC .97\n```\n:::\n\n\n## Gradient boosted model with PCA vs only top 5 variables: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#with PCAs \"young spenders\" and \"old spenders\" \n\nfit_gbm1 <- train(churn ~ .,\n             data = train, \n             method = \"gbm\",\n             tuneLength = 4, \n             preProcess = c(\"center\",\"scale\"),\n             metric = \"ROC\",\n             trControl = ctrl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8493             nan     0.1000    0.0167\n     2        0.8208             nan     0.1000    0.0132\n     3        0.7961             nan     0.1000    0.0128\n     4        0.7749             nan     0.1000    0.0096\n     5        0.7547             nan     0.1000    0.0106\n     6        0.7382             nan     0.1000    0.0081\n     7        0.7231             nan     0.1000    0.0073\n     8        0.7089             nan     0.1000    0.0063\n     9        0.6957             nan     0.1000    0.0058\n    10        0.6842             nan     0.1000    0.0057\n    20        0.6184             nan     0.1000    0.0024\n    40        0.5604             nan     0.1000    0.0007\n    60        0.5160             nan     0.1000    0.0011\n    80        0.4835             nan     0.1000    0.0005\n   100        0.4548             nan     0.1000    0.0009\n   120        0.4325             nan     0.1000    0.0006\n   140        0.4143             nan     0.1000    0.0002\n   160        0.3980             nan     0.1000    0.0001\n   180        0.3844             nan     0.1000    0.0001\n   200        0.3717             nan     0.1000   -0.0000\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8127             nan     0.1000    0.0359\n     2        0.7726             nan     0.1000    0.0206\n     3        0.7400             nan     0.1000    0.0164\n     4        0.7122             nan     0.1000    0.0134\n     5        0.6906             nan     0.1000    0.0113\n     6        0.6676             nan     0.1000    0.0108\n     7        0.6520             nan     0.1000    0.0076\n     8        0.6413             nan     0.1000    0.0048\n     9        0.6313             nan     0.1000    0.0045\n    10        0.6185             nan     0.1000    0.0068\n    20        0.5407             nan     0.1000    0.0036\n    40        0.4341             nan     0.1000    0.0016\n    60        0.3817             nan     0.1000    0.0004\n    80        0.3468             nan     0.1000    0.0006\n   100        0.3256             nan     0.1000    0.0002\n   120        0.3109             nan     0.1000    0.0002\n   140        0.2993             nan     0.1000    0.0001\n   160        0.2890             nan     0.1000   -0.0001\n   180        0.2802             nan     0.1000   -0.0002\n   200        0.2725             nan     0.1000   -0.0001\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8047             nan     0.1000    0.0366\n     2        0.7552             nan     0.1000    0.0238\n     3        0.7185             nan     0.1000    0.0169\n     4        0.6894             nan     0.1000    0.0137\n     5        0.6623             nan     0.1000    0.0123\n     6        0.6401             nan     0.1000    0.0112\n     7        0.6201             nan     0.1000    0.0099\n     8        0.6033             nan     0.1000    0.0078\n     9        0.5892             nan     0.1000    0.0069\n    10        0.5770             nan     0.1000    0.0057\n    20        0.4799             nan     0.1000    0.0033\n    40        0.3833             nan     0.1000    0.0003\n    60        0.3342             nan     0.1000    0.0003\n    80        0.3068             nan     0.1000    0.0003\n   100        0.2861             nan     0.1000   -0.0001\n   120        0.2729             nan     0.1000    0.0000\n   140        0.2631             nan     0.1000    0.0000\n   160        0.2537             nan     0.1000   -0.0003\n   180        0.2467             nan     0.1000   -0.0002\n   200        0.2394             nan     0.1000   -0.0001\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8027             nan     0.1000    0.0384\n     2        0.7519             nan     0.1000    0.0245\n     3        0.7044             nan     0.1000    0.0214\n     4        0.6684             nan     0.1000    0.0175\n     5        0.6409             nan     0.1000    0.0132\n     6        0.6176             nan     0.1000    0.0095\n     7        0.5961             nan     0.1000    0.0098\n     8        0.5756             nan     0.1000    0.0103\n     9        0.5593             nan     0.1000    0.0075\n    10        0.5426             nan     0.1000    0.0076\n    20        0.4453             nan     0.1000    0.0024\n    40        0.3489             nan     0.1000    0.0011\n    60        0.3010             nan     0.1000    0.0009\n    80        0.2785             nan     0.1000   -0.0002\n   100        0.2637             nan     0.1000    0.0001\n   120        0.2525             nan     0.1000   -0.0001\n   140        0.2419             nan     0.1000    0.0001\n   160        0.2317             nan     0.1000   -0.0001\n   180        0.2240             nan     0.1000   -0.0000\n   200        0.2160             nan     0.1000    0.0001\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8476             nan     0.1000    0.0157\n     2        0.8221             nan     0.1000    0.0119\n     3        0.7976             nan     0.1000    0.0115\n     4        0.7786             nan     0.1000    0.0091\n     5        0.7599             nan     0.1000    0.0085\n     6        0.7454             nan     0.1000    0.0071\n     7        0.7319             nan     0.1000    0.0068\n     8        0.7194             nan     0.1000    0.0056\n     9        0.7081             nan     0.1000    0.0050\n    10        0.6986             nan     0.1000    0.0045\n    20        0.6374             nan     0.1000    0.0025\n    40        0.5746             nan     0.1000    0.0009\n    60        0.5292             nan     0.1000    0.0006\n    80        0.4919             nan     0.1000    0.0006\n   100        0.4637             nan     0.1000    0.0005\n   120        0.4381             nan     0.1000    0.0008\n   140        0.4184             nan     0.1000    0.0003\n   160        0.4011             nan     0.1000    0.0001\n   180        0.3874             nan     0.1000   -0.0001\n   200        0.3748             nan     0.1000   -0.0000\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8208             nan     0.1000    0.0302\n     2        0.7800             nan     0.1000    0.0202\n     3        0.7498             nan     0.1000    0.0150\n     4        0.7285             nan     0.1000    0.0106\n     5        0.7024             nan     0.1000    0.0126\n     6        0.6869             nan     0.1000    0.0075\n     7        0.6686             nan     0.1000    0.0091\n     8        0.6535             nan     0.1000    0.0075\n     9        0.6413             nan     0.1000    0.0063\n    10        0.6301             nan     0.1000    0.0054\n    20        0.5467             nan     0.1000    0.0028\n    40        0.4457             nan     0.1000    0.0015\n    60        0.3907             nan     0.1000    0.0008\n    80        0.3626             nan     0.1000    0.0004\n   100        0.3333             nan     0.1000    0.0011\n   120        0.3148             nan     0.1000    0.0006\n   140        0.3003             nan     0.1000   -0.0001\n   160        0.2913             nan     0.1000   -0.0001\n   180        0.2827             nan     0.1000    0.0001\n   200        0.2769             nan     0.1000   -0.0001\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8113             nan     0.1000    0.0331\n     2        0.7683             nan     0.1000    0.0204\n     3        0.7329             nan     0.1000    0.0175\n     4        0.7034             nan     0.1000    0.0143\n     5        0.6737             nan     0.1000    0.0142\n     6        0.6503             nan     0.1000    0.0100\n     7        0.6311             nan     0.1000    0.0085\n     8        0.6151             nan     0.1000    0.0067\n     9        0.6007             nan     0.1000    0.0067\n    10        0.5893             nan     0.1000    0.0046\n    20        0.4784             nan     0.1000    0.0064\n    40        0.3864             nan     0.1000    0.0027\n    60        0.3359             nan     0.1000    0.0001\n    80        0.3104             nan     0.1000    0.0001\n   100        0.2926             nan     0.1000    0.0001\n   120        0.2805             nan     0.1000    0.0005\n   140        0.2683             nan     0.1000    0.0003\n   160        0.2582             nan     0.1000   -0.0001\n   180        0.2509             nan     0.1000   -0.0001\n   200        0.2451             nan     0.1000   -0.0002\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8061             nan     0.1000    0.0355\n     2        0.7575             nan     0.1000    0.0232\n     3        0.7210             nan     0.1000    0.0180\n     4        0.6890             nan     0.1000    0.0149\n     5        0.6653             nan     0.1000    0.0106\n     6        0.6376             nan     0.1000    0.0124\n     7        0.6114             nan     0.1000    0.0115\n     8        0.5918             nan     0.1000    0.0092\n     9        0.5783             nan     0.1000    0.0058\n    10        0.5601             nan     0.1000    0.0091\n    20        0.4529             nan     0.1000    0.0025\n    40        0.3576             nan     0.1000    0.0010\n    60        0.3134             nan     0.1000    0.0003\n    80        0.2861             nan     0.1000   -0.0001\n   100        0.2729             nan     0.1000    0.0001\n   120        0.2605             nan     0.1000    0.0003\n   140        0.2486             nan     0.1000   -0.0003\n   160        0.2396             nan     0.1000   -0.0001\n   180        0.2303             nan     0.1000   -0.0001\n   200        0.2233             nan     0.1000   -0.0001\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8480             nan     0.1000    0.0165\n     2        0.8224             nan     0.1000    0.0112\n     3        0.7985             nan     0.1000    0.0123\n     4        0.7789             nan     0.1000    0.0093\n     5        0.7618             nan     0.1000    0.0076\n     6        0.7453             nan     0.1000    0.0081\n     7        0.7329             nan     0.1000    0.0063\n     8        0.7212             nan     0.1000    0.0057\n     9        0.7100             nan     0.1000    0.0053\n    10        0.7003             nan     0.1000    0.0050\n    20        0.6402             nan     0.1000    0.0027\n    40        0.5782             nan     0.1000    0.0007\n    60        0.5286             nan     0.1000    0.0007\n    80        0.4941             nan     0.1000    0.0007\n   100        0.4644             nan     0.1000    0.0003\n   120        0.4399             nan     0.1000    0.0003\n   140        0.4187             nan     0.1000    0.0003\n   160        0.4020             nan     0.1000   -0.0001\n   180        0.3886             nan     0.1000    0.0002\n   200        0.3748             nan     0.1000    0.0001\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8233             nan     0.1000    0.0290\n     2        0.7803             nan     0.1000    0.0202\n     3        0.7457             nan     0.1000    0.0174\n     4        0.7191             nan     0.1000    0.0121\n     5        0.6960             nan     0.1000    0.0110\n     6        0.6797             nan     0.1000    0.0076\n     7        0.6664             nan     0.1000    0.0072\n     8        0.6502             nan     0.1000    0.0077\n     9        0.6363             nan     0.1000    0.0061\n    10        0.6253             nan     0.1000    0.0049\n    20        0.5390             nan     0.1000    0.0017\n    40        0.4288             nan     0.1000    0.0015\n    60        0.3760             nan     0.1000    0.0015\n    80        0.3429             nan     0.1000    0.0009\n   100        0.3205             nan     0.1000    0.0001\n   120        0.3079             nan     0.1000   -0.0002\n   140        0.2934             nan     0.1000    0.0002\n   160        0.2833             nan     0.1000    0.0000\n   180        0.2748             nan     0.1000   -0.0000\n   200        0.2669             nan     0.1000   -0.0001\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8097             nan     0.1000    0.0358\n     2        0.7629             nan     0.1000    0.0227\n     3        0.7273             nan     0.1000    0.0164\n     4        0.6969             nan     0.1000    0.0150\n     5        0.6708             nan     0.1000    0.0127\n     6        0.6492             nan     0.1000    0.0096\n     7        0.6323             nan     0.1000    0.0078\n     8        0.6165             nan     0.1000    0.0076\n     9        0.6015             nan     0.1000    0.0071\n    10        0.5813             nan     0.1000    0.0097\n    20        0.4813             nan     0.1000    0.0024\n    40        0.3772             nan     0.1000    0.0013\n    60        0.3301             nan     0.1000    0.0001\n    80        0.2986             nan     0.1000    0.0005\n   100        0.2810             nan     0.1000   -0.0000\n   120        0.2657             nan     0.1000   -0.0000\n   140        0.2554             nan     0.1000   -0.0002\n   160        0.2457             nan     0.1000   -0.0002\n   180        0.2386             nan     0.1000   -0.0002\n   200        0.2326             nan     0.1000   -0.0003\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8074             nan     0.1000    0.0368\n     2        0.7563             nan     0.1000    0.0249\n     3        0.7169             nan     0.1000    0.0202\n     4        0.6832             nan     0.1000    0.0160\n     5        0.6460             nan     0.1000    0.0177\n     6        0.6212             nan     0.1000    0.0119\n     7        0.6041             nan     0.1000    0.0080\n     8        0.5839             nan     0.1000    0.0090\n     9        0.5657             nan     0.1000    0.0086\n    10        0.5475             nan     0.1000    0.0087\n    20        0.4472             nan     0.1000    0.0033\n    40        0.3552             nan     0.1000    0.0005\n    60        0.3057             nan     0.1000    0.0008\n    80        0.2813             nan     0.1000   -0.0001\n   100        0.2632             nan     0.1000   -0.0000\n   120        0.2459             nan     0.1000   -0.0002\n   140        0.2368             nan     0.1000   -0.0000\n   160        0.2282             nan     0.1000   -0.0001\n   180        0.2209             nan     0.1000   -0.0002\n   200        0.2135             nan     0.1000   -0.0005\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8089             nan     0.1000    0.0368\n     2        0.7568             nan     0.1000    0.0246\n     3        0.7171             nan     0.1000    0.0190\n     4        0.6877             nan     0.1000    0.0135\n     5        0.6635             nan     0.1000    0.0116\n     6        0.6365             nan     0.1000    0.0127\n     7        0.6137             nan     0.1000    0.0105\n     8        0.5942             nan     0.1000    0.0097\n     9        0.5764             nan     0.1000    0.0084\n    10        0.5572             nan     0.1000    0.0097\n    20        0.4548             nan     0.1000    0.0030\n    40        0.3516             nan     0.1000    0.0010\n    60        0.3127             nan     0.1000    0.0002\n    80        0.2920             nan     0.1000    0.0002\n   100        0.2746             nan     0.1000   -0.0001\n   120        0.2632             nan     0.1000    0.0002\n   140        0.2528             nan     0.1000   -0.0002\n   160        0.2454             nan     0.1000   -0.0001\n   180        0.2390             nan     0.1000   -0.0003\n   200        0.2334             nan     0.1000   -0.0002\n```\n:::\n\n```{.r .cell-code}\nconfusionMatrix(predict(fit_gbm1, test),factor(test$churn))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   no  yes\n       no  1654   80\n       yes   46  245\n                                          \n               Accuracy : 0.9378          \n                 95% CI : (0.9264, 0.9479)\n    No Information Rate : 0.8395          \n    P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n                  Kappa : 0.7589          \n                                          \n Mcnemar's Test P-Value : 0.003283        \n                                          \n            Sensitivity : 0.9729          \n            Specificity : 0.7538          \n         Pos Pred Value : 0.9539          \n         Neg Pred Value : 0.8419          \n             Prevalence : 0.8395          \n         Detection Rate : 0.8168          \n   Detection Prevalence : 0.8563          \n      Balanced Accuracy : 0.8634          \n                                          \n       'Positive' Class : no              \n                                          \n```\n:::\n\n```{.r .cell-code}\nmyRoc <- roc(test$churn, predict(fit_gbm1, test, type=\"prob\")[,2])\n\nplot(myRoc)\n```\n\n::: {.cell-output-display}\n![](churners_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## auc(myRoc)\n#kappa = .76, AUC  = .97\n\n\n#with only top 5 variables \n\nbanksy2 = bank %>% select(total_amt_chng_q4_q1, total_trans_ct, total_trans_amt,total_revolving_bal, total_relationship_count,churn)\n\nbank_index2 <- createDataPartition(banksy2$churn, p = 0.80, list = FALSE)\ntrain2 <- banksy2[ bank_index2, ]\ntest2 <- banksy2[-bank_index2, ]\n\nfit_gbm2 <- train(churn ~ .,\n             data = train2, \n             method = \"gbm\",\n             tuneLength = 4, \n             preProcess = c(\"center\",\"scale\"),\n             metric = \"ROC\",\n             trControl = ctrl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8467             nan     0.1000    0.0166\n     2        0.8216             nan     0.1000    0.0132\n     3        0.7986             nan     0.1000    0.0115\n     4        0.7787             nan     0.1000    0.0100\n     5        0.7626             nan     0.1000    0.0085\n     6        0.7480             nan     0.1000    0.0067\n     7        0.7319             nan     0.1000    0.0081\n     8        0.7184             nan     0.1000    0.0067\n     9        0.7067             nan     0.1000    0.0052\n    10        0.6977             nan     0.1000    0.0040\n    20        0.6350             nan     0.1000    0.0026\n    40        0.5637             nan     0.1000    0.0010\n    60        0.5192             nan     0.1000    0.0006\n    80        0.4802             nan     0.1000    0.0005\n   100        0.4473             nan     0.1000    0.0004\n   120        0.4183             nan     0.1000    0.0002\n   140        0.3961             nan     0.1000    0.0002\n   160        0.3782             nan     0.1000    0.0000\n   180        0.3617             nan     0.1000    0.0002\n   200        0.3494             nan     0.1000    0.0001\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8192             nan     0.1000    0.0323\n     2        0.7780             nan     0.1000    0.0218\n     3        0.7442             nan     0.1000    0.0169\n     4        0.7174             nan     0.1000    0.0137\n     5        0.6973             nan     0.1000    0.0093\n     6        0.6748             nan     0.1000    0.0108\n     7        0.6594             nan     0.1000    0.0070\n     8        0.6393             nan     0.1000    0.0100\n     9        0.6277             nan     0.1000    0.0051\n    10        0.6140             nan     0.1000    0.0066\n    20        0.5315             nan     0.1000    0.0027\n    40        0.4101             nan     0.1000    0.0015\n    60        0.3475             nan     0.1000    0.0010\n    80        0.3141             nan     0.1000    0.0002\n   100        0.2889             nan     0.1000    0.0003\n   120        0.2668             nan     0.1000    0.0002\n   140        0.2503             nan     0.1000    0.0001\n   160        0.2352             nan     0.1000    0.0002\n   180        0.2258             nan     0.1000    0.0001\n   200        0.2177             nan     0.1000    0.0000\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8072             nan     0.1000    0.0364\n     2        0.7560             nan     0.1000    0.0233\n     3        0.7168             nan     0.1000    0.0173\n     4        0.6820             nan     0.1000    0.0168\n     5        0.6552             nan     0.1000    0.0124\n     6        0.6320             nan     0.1000    0.0112\n     7        0.6104             nan     0.1000    0.0104\n     8        0.5934             nan     0.1000    0.0078\n     9        0.5789             nan     0.1000    0.0072\n    10        0.5640             nan     0.1000    0.0065\n    20        0.4660             nan     0.1000    0.0086\n    40        0.3430             nan     0.1000    0.0012\n    60        0.2922             nan     0.1000    0.0002\n    80        0.2613             nan     0.1000    0.0001\n   100        0.2371             nan     0.1000   -0.0000\n   120        0.2192             nan     0.1000   -0.0000\n   140        0.2084             nan     0.1000   -0.0001\n   160        0.1975             nan     0.1000    0.0001\n   180        0.1881             nan     0.1000   -0.0000\n   200        0.1799             nan     0.1000   -0.0000\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8054             nan     0.1000    0.0395\n     2        0.7540             nan     0.1000    0.0258\n     3        0.7163             nan     0.1000    0.0182\n     4        0.6838             nan     0.1000    0.0164\n     5        0.6522             nan     0.1000    0.0140\n     6        0.6284             nan     0.1000    0.0113\n     7        0.6030             nan     0.1000    0.0119\n     8        0.5818             nan     0.1000    0.0101\n     9        0.5634             nan     0.1000    0.0089\n    10        0.5433             nan     0.1000    0.0086\n    20        0.4268             nan     0.1000    0.0029\n    40        0.3126             nan     0.1000    0.0014\n    60        0.2585             nan     0.1000    0.0005\n    80        0.2292             nan     0.1000    0.0000\n   100        0.2079             nan     0.1000    0.0000\n   120        0.1940             nan     0.1000    0.0000\n   140        0.1829             nan     0.1000   -0.0001\n   160        0.1746             nan     0.1000   -0.0001\n   180        0.1662             nan     0.1000   -0.0001\n   200        0.1589             nan     0.1000    0.0001\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8467             nan     0.1000    0.0168\n     2        0.8212             nan     0.1000    0.0128\n     3        0.7963             nan     0.1000    0.0125\n     4        0.7757             nan     0.1000    0.0092\n     5        0.7585             nan     0.1000    0.0092\n     6        0.7434             nan     0.1000    0.0071\n     7        0.7277             nan     0.1000    0.0076\n     8        0.7158             nan     0.1000    0.0057\n     9        0.7022             nan     0.1000    0.0063\n    10        0.6910             nan     0.1000    0.0054\n    20        0.6232             nan     0.1000    0.0029\n    40        0.5513             nan     0.1000    0.0013\n    60        0.5094             nan     0.1000    0.0006\n    80        0.4722             nan     0.1000    0.0005\n   100        0.4448             nan     0.1000    0.0004\n   120        0.4192             nan     0.1000    0.0005\n   140        0.3965             nan     0.1000    0.0003\n   160        0.3783             nan     0.1000    0.0006\n   180        0.3624             nan     0.1000    0.0006\n   200        0.3487             nan     0.1000    0.0002\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8154             nan     0.1000    0.0316\n     2        0.7752             nan     0.1000    0.0203\n     3        0.7389             nan     0.1000    0.0173\n     4        0.7128             nan     0.1000    0.0129\n     5        0.6923             nan     0.1000    0.0094\n     6        0.6697             nan     0.1000    0.0109\n     7        0.6564             nan     0.1000    0.0066\n     8        0.6391             nan     0.1000    0.0083\n     9        0.6289             nan     0.1000    0.0048\n    10        0.6149             nan     0.1000    0.0066\n    20        0.5307             nan     0.1000    0.0015\n    40        0.4174             nan     0.1000    0.0011\n    60        0.3652             nan     0.1000    0.0011\n    80        0.3206             nan     0.1000    0.0008\n   100        0.2909             nan     0.1000    0.0003\n   120        0.2691             nan     0.1000    0.0002\n   140        0.2514             nan     0.1000   -0.0001\n   160        0.2366             nan     0.1000    0.0004\n   180        0.2259             nan     0.1000    0.0000\n   200        0.2173             nan     0.1000    0.0000\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8078             nan     0.1000    0.0386\n     2        0.7587             nan     0.1000    0.0243\n     3        0.7202             nan     0.1000    0.0190\n     4        0.6891             nan     0.1000    0.0157\n     5        0.6656             nan     0.1000    0.0113\n     6        0.6426             nan     0.1000    0.0109\n     7        0.6193             nan     0.1000    0.0112\n     8        0.6000             nan     0.1000    0.0079\n     9        0.5838             nan     0.1000    0.0075\n    10        0.5675             nan     0.1000    0.0083\n    20        0.4644             nan     0.1000    0.0039\n    40        0.3479             nan     0.1000    0.0029\n    60        0.2944             nan     0.1000    0.0003\n    80        0.2586             nan     0.1000    0.0006\n   100        0.2361             nan     0.1000    0.0001\n   120        0.2199             nan     0.1000    0.0000\n   140        0.2079             nan     0.1000   -0.0001\n   160        0.1971             nan     0.1000   -0.0002\n   180        0.1892             nan     0.1000   -0.0000\n   200        0.1824             nan     0.1000   -0.0001\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8009             nan     0.1000    0.0420\n     2        0.7486             nan     0.1000    0.0245\n     3        0.7013             nan     0.1000    0.0211\n     4        0.6671             nan     0.1000    0.0153\n     5        0.6368             nan     0.1000    0.0142\n     6        0.6118             nan     0.1000    0.0114\n     7        0.5879             nan     0.1000    0.0107\n     8        0.5655             nan     0.1000    0.0095\n     9        0.5489             nan     0.1000    0.0077\n    10        0.5320             nan     0.1000    0.0079\n    20        0.4171             nan     0.1000    0.0041\n    40        0.3101             nan     0.1000    0.0013\n    60        0.2567             nan     0.1000    0.0004\n    80        0.2321             nan     0.1000    0.0001\n   100        0.2105             nan     0.1000   -0.0002\n   120        0.1953             nan     0.1000   -0.0001\n   140        0.1846             nan     0.1000   -0.0001\n   160        0.1768             nan     0.1000   -0.0002\n   180        0.1695             nan     0.1000   -0.0002\n   200        0.1623             nan     0.1000   -0.0001\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8439             nan     0.1000    0.0177\n     2        0.8182             nan     0.1000    0.0135\n     3        0.7932             nan     0.1000    0.0122\n     4        0.7715             nan     0.1000    0.0106\n     5        0.7537             nan     0.1000    0.0086\n     6        0.7357             nan     0.1000    0.0087\n     7        0.7206             nan     0.1000    0.0067\n     8        0.7095             nan     0.1000    0.0053\n     9        0.6963             nan     0.1000    0.0069\n    10        0.6851             nan     0.1000    0.0055\n    20        0.6165             nan     0.1000    0.0034\n    40        0.5446             nan     0.1000    0.0012\n    60        0.4991             nan     0.1000    0.0007\n    80        0.4644             nan     0.1000    0.0007\n   100        0.4339             nan     0.1000    0.0005\n   120        0.4091             nan     0.1000    0.0003\n   140        0.3870             nan     0.1000    0.0009\n   160        0.3694             nan     0.1000    0.0007\n   180        0.3536             nan     0.1000    0.0002\n   200        0.3389             nan     0.1000    0.0005\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8149             nan     0.1000    0.0349\n     2        0.7703             nan     0.1000    0.0222\n     3        0.7315             nan     0.1000    0.0192\n     4        0.7033             nan     0.1000    0.0141\n     5        0.6797             nan     0.1000    0.0115\n     6        0.6612             nan     0.1000    0.0086\n     7        0.6409             nan     0.1000    0.0096\n     8        0.6282             nan     0.1000    0.0060\n     9        0.6167             nan     0.1000    0.0054\n    10        0.6003             nan     0.1000    0.0074\n    20        0.5183             nan     0.1000    0.0022\n    40        0.4026             nan     0.1000    0.0017\n    60        0.3488             nan     0.1000    0.0009\n    80        0.3055             nan     0.1000    0.0006\n   100        0.2768             nan     0.1000    0.0006\n   120        0.2567             nan     0.1000    0.0001\n   140        0.2402             nan     0.1000    0.0002\n   160        0.2288             nan     0.1000    0.0001\n   180        0.2195             nan     0.1000   -0.0002\n   200        0.2094             nan     0.1000   -0.0001\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.7992             nan     0.1000    0.0398\n     2        0.7478             nan     0.1000    0.0247\n     3        0.7071             nan     0.1000    0.0197\n     4        0.6771             nan     0.1000    0.0149\n     5        0.6480             nan     0.1000    0.0136\n     6        0.6238             nan     0.1000    0.0118\n     7        0.6019             nan     0.1000    0.0101\n     8        0.5829             nan     0.1000    0.0084\n     9        0.5673             nan     0.1000    0.0068\n    10        0.5550             nan     0.1000    0.0053\n    20        0.4559             nan     0.1000    0.0057\n    40        0.3398             nan     0.1000    0.0033\n    60        0.2847             nan     0.1000    0.0011\n    80        0.2527             nan     0.1000    0.0004\n   100        0.2297             nan     0.1000    0.0002\n   120        0.2117             nan     0.1000    0.0003\n   140        0.1983             nan     0.1000   -0.0000\n   160        0.1870             nan     0.1000    0.0000\n   180        0.1791             nan     0.1000   -0.0001\n   200        0.1706             nan     0.1000   -0.0000\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.7974             nan     0.1000    0.0407\n     2        0.7413             nan     0.1000    0.0272\n     3        0.6988             nan     0.1000    0.0214\n     4        0.6671             nan     0.1000    0.0153\n     5        0.6362             nan     0.1000    0.0146\n     6        0.6138             nan     0.1000    0.0106\n     7        0.5930             nan     0.1000    0.0105\n     8        0.5684             nan     0.1000    0.0111\n     9        0.5491             nan     0.1000    0.0089\n    10        0.5314             nan     0.1000    0.0088\n    20        0.4239             nan     0.1000    0.0036\n    40        0.3073             nan     0.1000    0.0011\n    60        0.2541             nan     0.1000    0.0005\n    80        0.2262             nan     0.1000    0.0003\n   100        0.2058             nan     0.1000    0.0000\n   120        0.1888             nan     0.1000    0.0000\n   140        0.1787             nan     0.1000   -0.0001\n   160        0.1687             nan     0.1000    0.0002\n   180        0.1615             nan     0.1000   -0.0001\n   200        0.1540             nan     0.1000   -0.0002\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.8034             nan     0.1000    0.0404\n     2        0.7489             nan     0.1000    0.0272\n     3        0.7089             nan     0.1000    0.0205\n     4        0.6773             nan     0.1000    0.0156\n     5        0.6500             nan     0.1000    0.0131\n     6        0.6251             nan     0.1000    0.0120\n     7        0.6002             nan     0.1000    0.0123\n     8        0.5800             nan     0.1000    0.0098\n     9        0.5616             nan     0.1000    0.0080\n    10        0.5435             nan     0.1000    0.0082\n    20        0.4320             nan     0.1000    0.0030\n    40        0.3155             nan     0.1000    0.0011\n    60        0.2638             nan     0.1000    0.0013\n    80        0.2342             nan     0.1000    0.0001\n   100        0.2144             nan     0.1000    0.0000\n   120        0.2008             nan     0.1000   -0.0002\n   140        0.1906             nan     0.1000    0.0000\n   160        0.1836             nan     0.1000   -0.0000\n   180        0.1762             nan     0.1000    0.0000\n   200        0.1711             nan     0.1000   -0.0001\n```\n:::\n\n```{.r .cell-code}\nconfusionMatrix(predict(fit_gbm2, test2),factor(test2$churn))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   no  yes\n       no  1673   56\n       yes   27  269\n                                          \n               Accuracy : 0.959           \n                 95% CI : (0.9494, 0.9672)\n    No Information Rate : 0.8395          \n    P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n                  Kappa : 0.8422          \n                                          \n Mcnemar's Test P-Value : 0.002116        \n                                          \n            Sensitivity : 0.9841          \n            Specificity : 0.8277          \n         Pos Pred Value : 0.9676          \n         Neg Pred Value : 0.9088          \n             Prevalence : 0.8395          \n         Detection Rate : 0.8262          \n   Detection Prevalence : 0.8538          \n      Balanced Accuracy : 0.9059          \n                                          \n       'Positive' Class : no              \n                                          \n```\n:::\n\n```{.r .cell-code}\nmyRoc <- roc(test2$churn, predict(fit_gbm2, test2, type=\"prob\")[,2])\n\nplot(myRoc)\n```\n\n::: {.cell-output-display}\n![](churners_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n\n```{.r .cell-code}\n## auc(myRoc)\n#kappa = .85, AUC .99\n```\n:::\n\n\nSurprisingly, model with 5 non-PCA features performed better than the addition of 2 PCA features. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Here are a few lines to inspect your best model. Add some comments about optimal hyperparameters.\nprint(fit_gbm2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStochastic Gradient Boosting \n\n8102 samples\n   5 predictor\n   2 classes: 'no', 'yes' \n\nPre-processing: centered (5), scaled (5) \nResampling: Cross-Validated (3 fold) \nSummary of sample sizes: 5401, 5402, 5401 \nResampling results across tuning parameters:\n\n  interaction.depth  n.trees  ROC        Sens       Spec     \n  1                   50      0.9177438  0.9889703  0.4854071\n  1                  100      0.9456916  0.9872055  0.5453149\n  1                  150      0.9602890  0.9864703  0.6159754\n  1                  200      0.9686083  0.9848528  0.6574501\n  2                   50      0.9660284  0.9872052  0.6013825\n  2                  100      0.9775630  0.9861762  0.7288786\n  2                  150      0.9815884  0.9845587  0.7818740\n  2                  200      0.9832890  0.9824999  0.8033794\n  3                   50      0.9733137  0.9861761  0.6927803\n  3                  100      0.9817069  0.9850002  0.7826421\n  3                  150      0.9847457  0.9826473  0.8095238\n  3                  200      0.9856972  0.9820593  0.8210445\n  4                   50      0.9771594  0.9847054  0.7319508\n  4                  100      0.9844912  0.9827942  0.8056836\n  4                  150      0.9859642  0.9816178  0.8310292\n  4                  200      0.9862191  0.9810296  0.8333333\n\nTuning parameter 'shrinkage' was held constant at a value of 0.1\n\nTuning parameter 'n.minobsinnode' was held constant at a value of 10\nROC was used to select the optimal model using the largest value.\nThe final values used for the model were n.trees = 200, interaction.depth =\n 4, shrinkage = 0.1 and n.minobsinnode = 10.\n```\n:::\n\n```{.r .cell-code}\nprint(fit_gbm2$bestTune)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   n.trees interaction.depth shrinkage n.minobsinnode\n16     200                 4       0.1             10\n```\n:::\n:::\n\n\n\n## Re-fit and evaluation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the \"method\" below should match the one you chose above. \n\nset.seed(1504) # I will choose a different seed for evaluation\n\nbank_index <- createDataPartition(banksy2$churn, p = 0.80, list = FALSE)\ntrain <- banksy2[ bank_index, ]\ntest <- banksy2[-bank_index, ]\n\n# example spec for rf\nfit_final <- train(churn ~ .,\n             data = train, \n             method = \"gbm\",\n             tuneGrid=fit_gbm2$bestTune,\n             metric = \"ROC\",\n             trControl = ctrl) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.7986             nan     0.1000    0.0413\n     2        0.7478             nan     0.1000    0.0259\n     3        0.7070             nan     0.1000    0.0195\n     4        0.6749             nan     0.1000    0.0153\n     5        0.6478             nan     0.1000    0.0132\n     6        0.6198             nan     0.1000    0.0131\n     7        0.5916             nan     0.1000    0.0119\n     8        0.5698             nan     0.1000    0.0104\n     9        0.5511             nan     0.1000    0.0083\n    10        0.5349             nan     0.1000    0.0068\n    20        0.4235             nan     0.1000    0.0030\n    40        0.3064             nan     0.1000    0.0022\n    60        0.2542             nan     0.1000    0.0013\n    80        0.2261             nan     0.1000    0.0001\n   100        0.2072             nan     0.1000    0.0002\n   120        0.1915             nan     0.1000    0.0001\n   140        0.1802             nan     0.1000   -0.0000\n   160        0.1690             nan     0.1000    0.0000\n   180        0.1624             nan     0.1000   -0.0001\n   200        0.1556             nan     0.1000   -0.0002\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.7979             nan     0.1000    0.0390\n     2        0.7467             nan     0.1000    0.0246\n     3        0.7097             nan     0.1000    0.0181\n     4        0.6751             nan     0.1000    0.0162\n     5        0.6485             nan     0.1000    0.0123\n     6        0.6219             nan     0.1000    0.0120\n     7        0.6021             nan     0.1000    0.0093\n     8        0.5840             nan     0.1000    0.0079\n     9        0.5660             nan     0.1000    0.0087\n    10        0.5506             nan     0.1000    0.0072\n    20        0.4232             nan     0.1000    0.0037\n    40        0.3191             nan     0.1000    0.0012\n    60        0.2628             nan     0.1000    0.0010\n    80        0.2316             nan     0.1000    0.0001\n   100        0.2070             nan     0.1000    0.0002\n   120        0.1927             nan     0.1000    0.0001\n   140        0.1812             nan     0.1000   -0.0001\n   160        0.1712             nan     0.1000    0.0001\n   180        0.1650             nan     0.1000    0.0000\n   200        0.1579             nan     0.1000    0.0000\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.7999             nan     0.1000    0.0391\n     2        0.7434             nan     0.1000    0.0273\n     3        0.7035             nan     0.1000    0.0186\n     4        0.6726             nan     0.1000    0.0151\n     5        0.6451             nan     0.1000    0.0125\n     6        0.6228             nan     0.1000    0.0113\n     7        0.5987             nan     0.1000    0.0106\n     8        0.5757             nan     0.1000    0.0108\n     9        0.5533             nan     0.1000    0.0103\n    10        0.5374             nan     0.1000    0.0073\n    20        0.4230             nan     0.1000    0.0035\n    40        0.3201             nan     0.1000    0.0012\n    60        0.2668             nan     0.1000    0.0009\n    80        0.2377             nan     0.1000    0.0001\n   100        0.2172             nan     0.1000    0.0002\n   120        0.2038             nan     0.1000    0.0001\n   140        0.1914             nan     0.1000   -0.0001\n   160        0.1825             nan     0.1000   -0.0001\n   180        0.1733             nan     0.1000   -0.0001\n   200        0.1665             nan     0.1000   -0.0002\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        0.7984             nan     0.1000    0.0396\n     2        0.7475             nan     0.1000    0.0248\n     3        0.7076             nan     0.1000    0.0197\n     4        0.6744             nan     0.1000    0.0156\n     5        0.6376             nan     0.1000    0.0185\n     6        0.6141             nan     0.1000    0.0112\n     7        0.5897             nan     0.1000    0.0112\n     8        0.5712             nan     0.1000    0.0091\n     9        0.5574             nan     0.1000    0.0067\n    10        0.5412             nan     0.1000    0.0072\n    20        0.4317             nan     0.1000    0.0042\n    40        0.3195             nan     0.1000    0.0017\n    60        0.2692             nan     0.1000    0.0008\n    80        0.2387             nan     0.1000    0.0004\n   100        0.2193             nan     0.1000    0.0005\n   120        0.2047             nan     0.1000   -0.0001\n   140        0.1942             nan     0.1000    0.0000\n   160        0.1859             nan     0.1000    0.0000\n   180        0.1769             nan     0.1000   -0.0001\n   200        0.1717             nan     0.1000   -0.0001\n```\n:::\n\n```{.r .cell-code}\n# The last line means we will fit a model using the best tune parameters your CV found above.\n\nmyRoc <- roc(test$churn, predict(fit_final, test, type=\"prob\")[,2])\n\nplot(myRoc)\n```\n\n::: {.cell-output-display}\n![](churners_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## auc(myRoc)\n\n#Area under the curve: 0.988\n```\n:::\n",
    "supporting": [
      "churners_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}