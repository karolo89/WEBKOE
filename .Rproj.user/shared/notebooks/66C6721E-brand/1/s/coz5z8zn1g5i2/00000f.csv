"0","threshold <- 50"
"0",""
"0","network <-  bi.gram.count %>%"
"0","  filter(weight > threshold) %>%"
"0","  graph_from_data_frame(directed = FALSE)"
"0",""
"0","# Store the degree."
"0","V(network)$degree <- strength(graph = network)"
"0","# Compute the weight shares."
"0","E(network)$width <- E(network)$weight/max(E(network)$weight)"
"0",""
"0","# Create networkD3 object."
"0","network.D3 <- igraph_to_networkD3(g = network)"
"0","# Define node size."
"0","network.D3$nodes %<>% mutate(Degree = (1E-2)*V(network)$degree)"
"0","# Define color group"
"0","network.D3$nodes %<>% mutate(Group = 1)"
"0","# Define edges width. "
"0","network.D3$links$Width <- 10*E(network)$width"
"0",""
"0","forceNetwork("
"0","  Links = network.D3$links, "
"0","  Nodes = network.D3$nodes, "
"0","  Source = 'source', "
"0","  Target = 'target',"
"0","  NodeID = 'name',"
"0","  Group = 'Group', "
"0","  opacity = 0.9,"
"0","  Value = 'Width',"
"0","  Nodesize = 'Degree', "
"0","  # We input a JavaScript function."
"0","  linkWidth = JS(""function(d) { return Math.sqrt(d.value); }""), "
"0","  fontSize = 12,"
"0","  zoom = TRUE, "
"0","  opacityNoHover = 1"
"0",")"
