myRoc <- roc(test$churn, predict(fit, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
#.95 AUC
traindown = downSample(x = train[,-6], y= train$churn) %>% mutate(churn = Class) %>% select(-Class)
traindown %>% group_by(churn) %>% count()
fit <- train(churn ~ .,
data = traindown,
method = "rf",
tuneLength = 4,
metric = "ROC",
trControl = ctrl)
confusionMatrix(predict(fit, test),factor(test$churn))
myRoc <- roc(test$churn, predict(fit, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
# AUC .97
#with PCAs "young spenders" and "old spenders"
fit_gbm1 <- train(churn ~ .,
data = train,
method = "gbm",
tuneLength = 4,
preProcess = c("center","scale"),
metric = "ROC",
trControl = ctrl)
confusionMatrix(predict(fit_gbm1, test),factor(test$churn))
myRoc <- roc(test$churn, predict(fit_gbm1, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
#kappa = .76, AUC  = .97
#with only top 5 variables
banksy2 = bank %>% select(total_amt_chng_q4_q1, total_trans_ct, total_trans_amt,total_revolving_bal, total_relationship_count,churn)
bank_index2 <- createDataPartition(banksy2$churn, p = 0.80, list = FALSE)
train2 <- banksy2[ bank_index2, ]
test2 <- banksy2[-bank_index2, ]
fit_gbm2 <- train(churn ~ .,
data = train2,
method = "gbm",
tuneLength = 4,
preProcess = c("center","scale"),
metric = "ROC",
trControl = ctrl)
confusionMatrix(predict(fit_gbm2, test2),factor(test2$churn))
myRoc <- roc(test2$churn, predict(fit_gbm2, test2, type="prob")[,2])
plot(myRoc)
auc(myRoc)
#kappa = .85, AUC .99
# Here are a few lines to inspect your best model. Add some comments about optimal hyperparameters.
print(fit_gbm2)
print(fit_gbm2$bestTune)
# the "method" below should match the one you chose above.
set.seed(1504) # I will choose a different seed for evaluation
bank_index <- createDataPartition(banksy2$churn, p = 0.80, list = FALSE)
train <- banksy2[ bank_index, ]
test <- banksy2[-bank_index, ]
# example spec for rf
fit_final <- train(churn ~ .,
data = train,
method = "gbm",
tuneGrid=fit_gbm2$bestTune,
metric = "ROC",
trControl = ctrl)
# The last line means we will fit a model using the best tune parameters your CV found above.
myRoc <- roc(test$churn, predict(fit_final, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
library(tidyverse)
library(caret)
library(pROC)
library(MLmetrics)
library(fastDummies)
library(skimr)
knitr::opts_chunk$set(echo = TRUE)
bank <-readRDS(gzcon(url("https://github.com/karolo89/Raw_Data/raw/main/BankChurners.rds")))
bank = bank %>% rename_all(funs(tolower(.)))
skim(bank)
bank = bank %>% mutate(churn = as.factor(churn))
#what percentage of customers churn?
bank %>% group_by(churn) %>% count() %>% mutate(freq = n/nrow(bank))
#16% of customers churn
bank %>% filter(churn == 1) %>% ggplot(aes(x = credit_limit)) + geom_histogram(bins = 4)
#majority of churners have credit limit under %5000, some are even negative...
bank %>% group_by(churn) %>% summarize(avg_age = mean(customer_age), avg_credit_limit = mean(credit_limit), avg_total_trans_amt = mean(total_trans_amt), avg_util_ratio = mean(avg_utilization_ratio))
#churners average credit utilization ratio is about half of the non churners...they are weening of their credit usage.
bank %>% ggplot(aes(x = total_trans_amt)) + geom_histogram(aes(fill = churn))
#churners have generally less transaction amount
bank %>% filter(churn == "yes") %>% ggplot(aes(customer_age))
bank %>% ggplot(aes(x = total_trans_ct)) + geom_histogram(aes(fill=churn))
#most churners have a total_trans_ct less than 50
variables = bank %>% select(-churn) %>% colnames()
bank = bank %>% mutate(churn = as.factor(churn))
bank2 = bank %>% select(-churn) %>% dummy_cols(remove_selected_columns = T)
bank3 = cbind(bank2, select(bank,churn))
pr_bank = prcomp(x = select(bank3,-churn), scale = T, center = T)
summary(pr_bank)
screeplot(pr_bank, type = "lines")
head(pr_bank$rotation)
rownames_to_column(as.data.frame(pr_bank$rotation)) %>%
select(1:5) %>%
filter(abs(PC1) >= 0.3 | abs(PC2) >= 0.3 | abs(PC3) >= 0.3 | abs(PC4) >= 0.3)
prc = bind_cols(select(bank3, churn), as.data.frame(pr_bank$x)) %>%
select(1:5) %>%
rename("rich_men" = PC1, "cheap_men" = PC2, "young_spenders" = PC3, "old_spenders"= PC4)
#based on the graph below, "young spenders" and "old spenders" seem to be the most predictive of whether the customer will churn.
prc %>%
pivot_longer(cols = -churn, names_to = "component", values_to = "loading") %>% mutate(churn = as.factor(churn)) %>%
ggplot(aes(loading, fill=churn)) +
geom_density(alpha = 0.5) +
facet_grid(.~component)
ctrl <- trainControl(method = "cv", number = 3, classProbs=TRUE, summaryFunction = twoClassSummary)
bank_index <- createDataPartition(bank$churn, p = 0.80, list = FALSE)
train <- bank[ bank_index, ]
test <- bank[-bank_index, ]
big_model =train(churn ~ .,
data = train,
method = "rf",
tunelength = 4,
metric = "ROC",
trControl = ctrl)
importance = varImp(big_model)
plot(importance)
#most important variables are total_trans_ct, total_trans_amt, total_revolving_bal, total_ct_chng_q4_41, total_relationship_count
#choosing "old_spenders" and "young_spenders" to be 2 of the 5 total features in the model:
prc2 = prc%>% select(young_spenders,old_spenders)
#combining these features with rest of bank ds, then grabbing best variables:
banksy = cbind(prc2, bank3) %>%
select(young_spenders, old_spenders,total_trans_ct,total_trans_amt,total_revolving_bal, churn)
# specify the model to be used (i.e. KNN, Naive Bayes, decision tree, random forest, bagged trees) and the tuning parameters used
set.seed(504)
bank_index <- createDataPartition(banksy$churn, p = 0.80, list = FALSE)
train <- banksy[ bank_index, ]
test <- banksy[-bank_index, ]
# example spec for rf
fit <- train(churn ~ .,
data = train,
method = "knn",
preProcess = c("center","scale"),
tuneGrid = expand.grid(k = seq(31,41,2)), # best K between 31 and 41
metric = "ROC",
trControl = ctrl)
fit
confusionMatrix(predict(fit, test),factor(test$churn))
myRoc <- roc(test$churn, predict(fit, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
#.95 AUC
traindown = downSample(x = train[,-6], y= train$churn) %>% mutate(churn = Class) %>% select(-Class)
traindown %>% group_by(churn) %>% count()
fit <- train(churn ~ .,
data = traindown,
method = "rf",
tuneLength = 4,
metric = "ROC",
trControl = ctrl)
confusionMatrix(predict(fit, test),factor(test$churn))
myRoc <- roc(test$churn, predict(fit, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
# AUC .97
#with PCAs "young spenders" and "old spenders"
fit_gbm1 <- train(churn ~ .,
data = train,
method = "gbm",
tuneLength = 4,
preProcess = c("center","scale"),
metric = "ROC",
trControl = ctrl)
confusionMatrix(predict(fit_gbm1, test),factor(test$churn))
myRoc <- roc(test$churn, predict(fit_gbm1, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
#kappa = .76, AUC  = .97
#with only top 5 variables
banksy2 = bank %>% select(total_amt_chng_q4_q1, total_trans_ct, total_trans_amt,total_revolving_bal, total_relationship_count,churn)
bank_index2 <- createDataPartition(banksy2$churn, p = 0.80, list = FALSE)
train2 <- banksy2[ bank_index2, ]
test2 <- banksy2[-bank_index2, ]
fit_gbm2 <- train(churn ~ .,
data = train2,
method = "gbm",
tuneLength = 4,
preProcess = c("center","scale"),
metric = "ROC",
trControl = ctrl)
confusionMatrix(predict(fit_gbm2, test2),factor(test2$churn))
myRoc <- roc(test2$churn, predict(fit_gbm2, test2, type="prob")[,2])
plot(myRoc)
auc(myRoc)
#kappa = .85, AUC .99
# Here are a few lines to inspect your best model. Add some comments about optimal hyperparameters.
print(fit_gbm2)
print(fit_gbm2$bestTune)
# the "method" below should match the one you chose above.
set.seed(1504) # I will choose a different seed for evaluation
bank_index <- createDataPartition(banksy2$churn, p = 0.80, list = FALSE)
train <- banksy2[ bank_index, ]
test <- banksy2[-bank_index, ]
# example spec for rf
fit_final <- train(churn ~ .,
data = train,
method = "gbm",
tuneGrid=fit_gbm2$bestTune,
metric = "ROC",
trControl = ctrl)
# The last line means we will fit a model using the best tune parameters your CV found above.
myRoc <- roc(test$churn, predict(fit_final, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
library(tidyverse)
library(caret)
library(pROC)
library(MLmetrics)
library(fastDummies)
library(skimr)
knitr::opts_chunk$set(echo = TRUE)
bank <-readRDS(gzcon(url("https://github.com/karolo89/Raw_Data/raw/main/BankChurners.rds")))
bank = bank %>% rename_all(funs(tolower(.)))
skim(bank)
bank = bank %>% mutate(churn = as.factor(churn))
variables = bank %>% select(-churn) %>% colnames()
bank = bank %>% mutate(churn = as.factor(churn))
bank2 = bank %>% select(-churn) %>% dummy_cols(remove_selected_columns = T)
bank3 = cbind(bank2, select(bank,churn))
pr_bank = prcomp(x = select(bank3,-churn), scale = T, center = T)
summary(pr_bank)
screeplot(pr_bank, type = "lines")
head(pr_bank$rotation)
rownames_to_column(as.data.frame(pr_bank$rotation)) %>%
select(1:5) %>%
filter(abs(PC1) >= 0.3 | abs(PC2) >= 0.3 | abs(PC3) >= 0.3 | abs(PC4) >= 0.3)
prc = bind_cols(select(bank3, churn), as.data.frame(pr_bank$x)) %>%
select(1:5) %>%
rename("rich_men" = PC1, "cheap_men" = PC2, "young_spenders" = PC3, "old_spenders"= PC4)
#based on the graph below, "young spenders" and "old spenders" seem to be the most predictive of whether the customer will churn.
prc %>%
pivot_longer(cols = -churn, names_to = "component", values_to = "loading") %>% mutate(churn = as.factor(churn)) %>%
ggplot(aes(loading, fill=churn)) +
geom_density(alpha = 0.5) +
facet_grid(.~component)
ctrl <- trainControl(method = "cv", number = 3, classProbs=TRUE, summaryFunction = twoClassSummary)
bank_index <- createDataPartition(bank$churn, p = 0.80, list = FALSE)
train <- bank[ bank_index, ]
test <- bank[-bank_index, ]
big_model =train(churn ~ .,
data = train,
method = "rf",
tunelength = 4,
metric = "ROC",
trControl = ctrl)
importance = varImp(big_model)
plot(importance)
#most important variables are total_trans_ct, total_trans_amt, total_revolving_bal, total_ct_chng_q4_41, total_relationship_count
#choosing "old_spenders" and "young_spenders" to be 2 of the 5 total features in the model:
prc2 = prc%>% select(young_spenders,old_spenders)
#combining these features with rest of bank ds, then grabbing best variables:
banksy = cbind(prc2, bank3) %>%
select(young_spenders, old_spenders,total_trans_ct,total_trans_amt,total_revolving_bal, churn)
# specify the model to be used (i.e. KNN, Naive Bayes, decision tree, random forest, bagged trees) and the tuning parameters used
set.seed(504)
bank_index <- createDataPartition(banksy$churn, p = 0.80, list = FALSE)
train <- banksy[ bank_index, ]
test <- banksy[-bank_index, ]
# example spec for rf
fit <- train(churn ~ .,
data = train,
method = "knn",
preProcess = c("center","scale"),
tuneGrid = expand.grid(k = seq(31,41,2)), # best K between 31 and 41
metric = "ROC",
trControl = ctrl)
fit
confusionMatrix(predict(fit, test),factor(test$churn))
myRoc <- roc(test$churn, predict(fit, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
#.95 AUC
traindown = downSample(x = train[,-6], y= train$churn) %>% mutate(churn = Class) %>% select(-Class)
traindown %>% group_by(churn) %>% count()
fit <- train(churn ~ .,
data = traindown,
method = "rf",
tuneLength = 4,
metric = "ROC",
trControl = ctrl)
confusionMatrix(predict(fit, test),factor(test$churn))
myRoc <- roc(test$churn, predict(fit, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
# AUC .97
#with PCAs "young spenders" and "old spenders"
fit_gbm1 <- train(churn ~ .,
data = train,
method = "gbm",
tuneLength = 4,
preProcess = c("center","scale"),
metric = "ROC",
trControl = ctrl)
confusionMatrix(predict(fit_gbm1, test),factor(test$churn))
myRoc <- roc(test$churn, predict(fit_gbm1, test, type="prob")[,2])
plot(myRoc)
## auc(myRoc)
#kappa = .76, AUC  = .97
#with only top 5 variables
banksy2 = bank %>% select(total_amt_chng_q4_q1, total_trans_ct, total_trans_amt,total_revolving_bal, total_relationship_count,churn)
bank_index2 <- createDataPartition(banksy2$churn, p = 0.80, list = FALSE)
train2 <- banksy2[ bank_index2, ]
test2 <- banksy2[-bank_index2, ]
fit_gbm2 <- train(churn ~ .,
data = train2,
method = "gbm",
tuneLength = 4,
preProcess = c("center","scale"),
metric = "ROC",
trControl = ctrl)
confusionMatrix(predict(fit_gbm2, test2),factor(test2$churn))
myRoc <- roc(test2$churn, predict(fit_gbm2, test2, type="prob")[,2])
plot(myRoc)
## auc(myRoc)
#kappa = .85, AUC .99
# Here are a few lines to inspect your best model. Add some comments about optimal hyperparameters.
print(fit_gbm2)
print(fit_gbm2$bestTune)
# the "method" below should match the one you chose above.
set.seed(1504) # I will choose a different seed for evaluation
bank_index <- createDataPartition(banksy2$churn, p = 0.80, list = FALSE)
train <- banksy2[ bank_index, ]
test <- banksy2[-bank_index, ]
# example spec for rf
fit_final <- train(churn ~ .,
data = train,
method = "gbm",
tuneGrid=fit_gbm2$bestTune,
metric = "ROC",
trControl = ctrl)
# The last line means we will fit a model using the best tune parameters your CV found above.
myRoc <- roc(test$churn, predict(fit_final, test, type="prob")[,2])
plot(myRoc)
## auc(myRoc)
#Area under the curve: 0.988
library(tidyverse)
library(caret)
library(pROC)
library(MLmetrics)
library(fastDummies)
library(skimr)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# the "method" below should match the one you chose above.
set.seed(1504) # I will choose a different seed for evaluation
bank_index <- createDataPartition(banksy2$churn, p = 0.80, list = FALSE)
train <- banksy2[ bank_index, ]
test <- banksy2[-bank_index, ]
# example spec for rf
fit_final <- train(churn ~ .,
data = train,
method = "gbm",
tuneGrid=fit_gbm2$bestTune,
metric = "ROC",
trControl = ctrl)
# The last line means we will fit a model using the best tune parameters your CV found above.
myRoc <- roc(test$churn, predict(fit_final, test, type="prob")[,2])
ctrl <- trainControl(method = "cv", number = 3, classProbs=TRUE, summaryFunction = twoClassSummary)
bank_index <- createDataPartition(bank$churn, p = 0.80, list = FALSE)
train <- bank[ bank_index, ]
test <- bank[-bank_index, ]
big_model =train(churn ~ .,
data = train,
method = "rf",
tunelength = 4,
metric = "ROC",
trControl = ctrl)
importance = varImp(big_model)
# Pivot the data to long format
df_long <- importance %>%
pivot_longer(cols = -variable, names_to = "component", values_to = "value")
library(tidyverse)
library(caret)
library(pROC)
library(MLmetrics)
library(fastDummies)
library(skimr)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
bank <-readRDS(gzcon(url("https://github.com/karolo89/Raw_Data/raw/main/BankChurners.rds")))
bank = bank %>% rename_all(funs(tolower(.)))
skim(bank)
bank = bank %>% mutate(churn = as.factor(churn))
variables = bank %>% select(-churn) %>% colnames()
bank = bank %>% mutate(churn = as.factor(churn))
bank2 = bank %>% select(-churn) %>% dummy_cols(remove_selected_columns = T)
bank3 = cbind(bank2, select(bank,churn))
pr_bank = prcomp(x = select(bank3,-churn), scale = T, center = T)
summary(pr_bank)
screeplot(pr_bank, type = "lines")
head(pr_bank$rotation)
rownames_to_column(as.data.frame(pr_bank$rotation)) %>%
select(1:5) %>%
filter(abs(PC1) >= 0.3 | abs(PC2) >= 0.3 | abs(PC3) >= 0.3 | abs(PC4) >= 0.3)
prc = bind_cols(select(bank3, churn), as.data.frame(pr_bank$x)) %>%
select(1:5) %>%
rename("rich_men" = PC1, "cheap_men" = PC2, "young_spenders" = PC3, "old_spenders"= PC4)
#based on the graph below, "young spenders" and "old spenders" seem to be the most predictive of whether the customer will churn.
# Pivot the data to long format
df_long <- prc %>%
pivot_longer(cols = -churn, names_to = "component", values_to = "loading")
# Convert churn to a factor variable
df_long$churn <- as.factor(df_long$churn)
# Define custom colors
custom_colors <- c("#E69F00", "#56B4E9") # Replace with your preferred colors
# Plot the density distribution with improved theme
ggplot(df_long, aes(loading, fill = churn)) +
geom_density(alpha = 0.5) +
facet_grid(. ~ component) +
theme_minimal() +  # Set the overall theme to minimal
labs(title = "Density Distribution of Loading",
x = "Loading", y = "Density") +  # Modify axis labels and title
scale_fill_manual(values = custom_colors) +  # Use custom colors
theme(plot.title = element_text(size = 16, face = "bold"),  # Adjust title appearance
axis.text = element_text(size = 12),  # Adjust axis text size
legend.title = element_blank(),  # Hide legend title
legend.position = "bottom")  # Position legend at the bottom
ctrl <- trainControl(method = "cv", number = 3, classProbs=TRUE, summaryFunction = twoClassSummary)
bank_index <- createDataPartition(bank$churn, p = 0.80, list = FALSE)
train <- bank[ bank_index, ]
test <- bank[-bank_index, ]
big_model =train(churn ~ .,
data = train,
method = "rf",
tunelength = 4,
metric = "ROC",
trControl = ctrl)
importance = varImp(big_model)
# Pivot the data to long format
df_long <- importance %>%
pivot_longer(cols = -variable, names_to = "component", values_to = "value")
ctrl <- trainControl(method = "cv", number = 3, classProbs=TRUE, summaryFunction = twoClassSummary)
bank_index <- createDataPartition(bank$churn, p = 0.80, list = FALSE)
train <- bank[ bank_index, ]
test <- bank[-bank_index, ]
big_model =train(churn ~ .,
data = train,
method = "rf",
tunelength = 4,
metric = "ROC",
trControl = ctrl)
# Compute variable importance
importance <- varImp(big_model)
# Plot variable importance with customized theme
ggplot(importance, aes(x = reorder(Variables, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "#1f77b4") +
labs(x = "Variables", y = "Importance") +
ggtitle("Variable Importance") +
theme_minimal()
#most important variables are total_trans_ct, total_trans_amt, total_revolving_bal, total_ct_chng_q4_41, total_relationship_count
# the "method" below should match the one you chose above.
set.seed(1504) # I will choose a different seed for evaluation
bank_index <- createDataPartition(banksy2$churn, p = 0.80, list = FALSE)
train <- banksy2[ bank_index, ]
test <- banksy2[-bank_index, ]
# example spec for rf
fit_final <- train(churn ~ .,
data = train,
method = "gbm",
tuneGrid=fit_gbm2$bestTune,
metric = "ROC",
trControl = ctrl)
# The last line means we will fit a model using the best tune parameters your CV found above.
myRoc <- roc(test$churn, predict(fit_final, test, type="prob")[,2])
# the "method" below should match the one you chose above.
set.seed(1504) # I will choose a different seed for evaluation
bank_index <- createDataPartition(banksy2$churn, p = 0.80, list = FALSE)
train <- banksy2[ bank_index, ]
test <- banksy2[-bank_index, ]
# example spec for rf
fit_final <- train(churn ~ .,
data = train,
method = "gbm",
tuneGrid=fit_gbm2$bestTune,
metric = "ROC",
trControl = ctrl)
# The last line means we will fit a model using the best tune parameters your CV found above.
myRoc <- roc(test$churn, predict(fit_final, test, type="prob")[,2])
# the "method" below should match the one you chose above.
set.seed(1504) # I will choose a different seed for evaluation
bank_index <- createDataPartition(banksy2$churn, p = 0.80, list = FALSE)
train <- banksy2[ bank_index, ]
test <- banksy2[-bank_index, ]
# example spec for rf
fit_final <- train(churn ~ .,
data = train,
method = "gbm",
tuneGrid=fit_gbm2$bestTune,
metric = "ROC",
trControl = ctrl)
# The last line means we will fit a model using the best tune parameters your CV found above.
myRoc <- roc(test$churn, predict(fit_final, test, type="prob")[,2])
NULL  # Assigning NULL will prevent the results from being printed
mall <-readRDS(gzcon(url("https://raw.githubusercontent.com/karolo89/WEBKOE/main/projects/MarketSegmentation/Mall_Customers.csv")))
mall <-readRDS(gzcon(url("https://raw.githubusercontent.com/karolo89/WEBKOE/raw/projects/MarketSegmentation/Mall_Customers.csv")))
library(tidyverse)
library(caret)
library(pROC)
library(MLmetrics)
library(fastDummies)
library(skimr)
mall <-readRDS(gzcon(url("https://raw.githubusercontent.com/karolo89/WEBKOE/main/projects/MarketSegmentation/Mall_Customers.csv")))
mall <-read,csv(https://raw.githubusercontent.com/karolo89/WEBKOE/main/projects/MarketSegmentation/Mall_Customers.csv)
mall <- read.csv("https://raw.githubusercontent.com/karolo89/WEBKOE/main/projects/MarketSegmentation/Mall_Customers.csv")
View(mall)
mall <- read.csv("https://raw.githubusercontent.com/karolo89/WEBKOE/main/projects/MarketSegmentation/Mall_Customers.csv")
skim(mall)
mall <-read.csv("D:/RStudio/CustomerSegmentation/Cust_Segmentation.csv",1)
mall <- read.csv("https://raw.githubusercontent.com/karolo89/WEBKOE/main/projects/MarketSegmentation/Mall_Customers.csv")
skim(mall)
